datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}
model Ana {
  id            String @id @default(uuid())
  userId        String
  seed          String @db.Text
  messages      Message[]
}
model Message {
  id          String   @id @default(uuid())
  role        Role   
  content     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companionId String
  userId      String

  companion   Ana @relation(fields: [companionId], references: [id], onDelete: Cascade)
  
  @@index([companionId])
}
enum Role {
  user
  system
}

model User{
  id          String @id @default(uuid())
  userId      String @unique
  username    String
  imageUrl    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}
model Course {
  id          String @id @default(uuid())
  userId      String
  title       String @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float? 
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])
  attachments Attachment[]
  chapters Chapter[]
  purchases Purchase[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}
model Category{
  id String @id @default(uuid())
  name String @unique
  courses Course[]
}
model Attachment {
  id String @id @default(uuid())
  name String
  url String @db.Text

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}
model Chapter{
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublised Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 

  @@index([courseId])
}
model MuxData{
  id String @id @default(uuid())
  chapterId String @unique
  assetId String
  playerId String?

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}
model UserProgress{
  id String @id @default(uuid())
  userId String
  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isCompleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}
model Purchase{
  id String @id @default(uuid())
  userId String
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer{
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSubscription{
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String? @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId String? @unique @map(name: "stripe_subscription_id")
  stripePriceId String? @unique @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @unique @map(name: "stripe_current_period_end")
}